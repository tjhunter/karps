syntax = "proto3";

package karps.core;

import "karps/proto/graph.proto";
import "karps/proto/io.proto";
import "karps/proto/computation.proto";
import "karps/proto/profiling.proto";

service KarpsMain {
  rpc CreateSession (CreateSessionRequest) returns (CreateSessionResponse);

  rpc StreamCreateComputation (CreateComputationRequest) returns (stream ComputationStreamResponse);
};


message CreateSessionRequest {
  SessionId requested_session = 1;
};

message CreateSessionResponse {};

message CreateComputationRequest {
  SessionId session = 1;
  Graph graph = 3;
  ComputationId requested_computation = 4;
  repeated Path requested_paths = 5;
};

message CreateComputationResponse {};

message ComputationStatusRequest {
  SessionId session = 1;
  ComputationId computation = 2;
  repeated Path requested_paths = 3;
  
};

message ComputationStreamResponse {
  SessionId session = 1;
  ComputationId computation = 2;
  // One or more of the following are returned:
  Graph start_graph = 3;
  Graph pinned_graph = 4;
  // Returns all the most recent info on a node if anything changes for this node.
  // Not super efficient as the spark stats will be repeatedly sent over.
  BatchComputationResult results = 5;
  CompilationResult compilation_result = 6;
  // Some profiling information about the computation.
  // This is sent as a single batch before the end of the stream.
  ComputationTrace computation_trace = 7;
};

message CompilationResult {
  // Some error message if something went wrong.
  string error = 1;
  // There may be multiple graphs, each corresponding to a
  // different compilation phase.
  // They are in order, until nothing is available.
  repeated CompilationPhaseGraph compilation_graph = 2;
  // Some information about the compilation.
  // This includes all the errors that may have happened.
  //repeated AnalysisMessage messages = 3;
}
